import { generateMnemonic, mnemonicToSeedSync } from "bip39";
import nacl from "tweetnacl";
import { derivePath } from "ed25519-hd-key";
import { Keypair } from "@solana/web3.js";
import { Buffer } from "buffer";  // Import the buffer polyfill
import { useState } from "react";
import { log } from "console";

const StarButton = () => {
  const [mnemonicArr, setMnemonicArr] = useState([]);
  const [keyPairs, setKeyPairs] = useState([]);

  const createSeed = async () => {
    console.log('clicked');

    const mnemonic = await generateMnemonic();
    setMnemonicArr(mnemonic.split(" ")); // Split mnemonic into array of words
    const seed = mnemonicToSeedSync(mnemonic); // Convert mnemonic to seed
    return seed
  };



  // setKeyPairs(newKeyPairs); // Update the state with the generated keypairs
  const createWallet = async (seed) => {
    Generate keypair(s)
    const newKeyPairs = []; // Array to hold keypairs
    for (let i = 0; i < 4; i++) {  // Adjust the loop if you want more keypairs
      const path = `m/44'/501'/${i}'/0'`;  // Solana derivation path
      const derivedSeed = derivePath(path, seed).key;
      const secret = nacl.sign.keyPair.fromSeed(derivedSeed).secretKey;
      const keypair = Keypair.fromSecretKey(secret);

      newKeyPairs.push({
        publicKey: keypair.publicKey.toString('hex'),  // Store publicKey as hex
        secretKey: Buffer.from(secret).toString('hex') // Store secretKey as hex
      });
    }
  }

  return (
    <div className="flex flex-col justify-center items-center">
      <button
        className="bg-gray-900 text-white p-4 m-5 rounded-lg"
        onClick={createSeed}
      >
        Create Phrase
      </button>

      {/* Display Mnemonic */}
      <div className="flex bg-gray-800 m-2 p-2 rounded-lg">
        {mnemonicArr.map((word, index) => (
          <div
            key={index}
            className="flex bg-black text-white m-2 p-2 rounded-lg justify-center items-center"
          >
            <span className="text-gray-400 p-1">{`${index + 1}`}</span>
            {word}
          </div>
        ))}
      </div>

      {/* Display Keypairs */}
      <div className="flex flex-col justify-center items-center box-border">
        {keyPairs.length > 0 && (
          keyPairs.map((keyItem, index) => (
            <div key={index} className="text-white bg-gray-800 m-2 p-4 rounded-lg space-y-1.5 w-full">
              <h1>{`Wallet ${index + 1}`}</h1>
              <div className="border p-1 rounded-lg">
                <p>Public Key: {keyItem.publicKey}</p>
              </div>
              <div className="border p-1 rounded-lg">
                <p>Secret Key: {keyItem.secretKey}</p>
              </div>
            </div>
          ))
        )}
        <button className="bg-gray-900 text-white p-4 m-5 rounded-lg w-[150px]"
        >New Wallet</button>
      </div>
    </div>
  );
};

export default StarButton;
